image: docker:latest
services:
  - docker:dind

variables:
  CS_ANALYZER_IMAGE: registry.gitlab.com/security-products/container-scanning:4

stages:
  - lint
  - test
  - build
  - release
  - scan
  - deploy

Linting (isort):
  stage: lint
  image: python:3.10.4-alpine3.15
  script:
    - pip install isort
    - isort . --check-only
  allow_failure: true

Linting (flake):
  stage: lint
  image: python:3.10.4-alpine3.15
  script:
    - python -m pip install flake8
    - flake8 .
  allow_failure: true

Linting (pylint):
  stage: lint
  image: python:3.10.4-alpine3.15
  script:
    - pip install pylint
    - find . -type f -name "*.py" | xargs pylint
  allow_failure: true

Test with SonarCloud:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  script:
    - >
      sonar-scanner 
      -Dsonar.qualitygate.wait=true 
      -Dsonar.projectKey="gezm0_internship_diploma2" 
      -Dsonar.python.version=3.9 
      -Dsonar.organization="gezm0-gitlab"
  allow_failure: true

Build infra images (dev):
  stage: build
  only:
    - main
  script:
    - cd app_infra
    - docker build --pull --no-cache -f Dockerfile_db_create_tables -t $CI_REGISTRY_IMAGE:db_create.$CI_COMMIT_SHORT_SHA .
    - docker build --pull --no-cache -f Dockerfile_db_drop_tables -t $CI_REGISTRY_IMAGE:db_drop.$CI_COMMIT_SHORT_SHA .

Build infra images (prod):
  stage: build
  only:
    - tags
  script:
    - cd app_infra
    - docker build --pull --no-cache -f Dockerfile_db_create_tables -t $CI_REGISTRY_IMAGE:db_create.$CI_COMMIT_TAG .
    - docker build --pull --no-cache -f Dockerfile_db_drop_tables -t $CI_REGISTRY_IMAGE:db_drop.$CI_COMMIT_TAG .

Build applications images (dev):
  stage: build
  only:
    - main
  script:
    - docker build --pull --no-cache -t $CI_REGISTRY_IMAGE:app_back.$CI_COMMIT_SHORT_SHA app_back
    - docker build --pull --no-cache -t $CI_REGISTRY_IMAGE:app_front.$CI_COMMIT_SHORT_SHA app_front

Build applications images (prod):
  stage: build
  only:
    - tags
  script:
    - docker build --pull --no-cache -t $CI_REGISTRY_IMAGE:app_back.$CI_COMMIT_TAG app_back
    - docker build --pull --no-cache -t $CI_REGISTRY_IMAGE:app_front.$CI_COMMIT_TAG app_front

Release images (dev):
  stage: release
  only:
    - main
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker push $CI_REGISTRY_IMAGE:db_create.$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:db_drop.$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:app_back.$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:app_front.$CI_COMMIT_SHORT_SHA

Release images (prod):
  stage: release
  only:
    - tags
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker push $CI_REGISTRY_IMAGE:db_create.$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:db_drop.$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:app_back.$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:app_front.$CI_COMMIT_TAG

Scan image (dev):
  image: "$CS_ANALYZER_IMAGE$CS_IMAGE_SUFFIX"
  stage: scan
  only:
    - main
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE:app_front.$CI_COMMIT_SHORT_SHA
    GIT_STRATEGY: none
    CS_IMAGE_SUFFIX: -fips
  allow_failure: true
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
      dependency_scanning: gl-dependency-scanning-report.json
    paths: [gl-container-scanning-report.json, gl-dependency-scanning-report.json]
  dependencies: []
  script:
    - gtcs scan
  
Scan image (prod):
  image: "$CS_ANALYZER_IMAGE$CS_IMAGE_SUFFIX"
  stage: scan
  only:
    - tags
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE:app_front.$CI_COMMIT_TAG
    GIT_STRATEGY: none
    CS_IMAGE_SUFFIX: -fips
  allow_failure: true
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
      dependency_scanning: gl-dependency-scanning-report.json
    paths: [gl-container-scanning-report.json, gl-dependency-scanning-report.json]
  dependencies: []
  script:
    - gtcs scan

Deploy (dev):
  image: alpine:latest
  stage: deploy
  variables:
    K8S_NAMESPACE: dev
    OWN_TAG: $CI_COMMIT_SHORT_SHA
  before_script:
    - apk add --no-cache aws-cli curl gettext
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.22.5/bin/linux/amd64/kubectl
    - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name eks-cluster-diploma
  only:
    - main
  script:
    - envsubst < k8s/db_drop.yaml | kubectl apply -f - && sleep 10
    - envsubst < k8s/db_create.yaml | kubectl apply -f - && sleep 10
    - envsubst < k8s/app_back.yaml | kubectl apply -f -
    - envsubst < k8s/app_front.yaml | kubectl apply -f -
    - kubectl rollout restart deployment app-front -n ${K8S_NAMESPACE}

Deploy (prod):
  image: alpine:latest
  stage: deploy
  variables:
    K8S_NAMESPACE: prod
    OWN_TAG: $CI_COMMIT_TAG
  before_script:
    - apk add --no-cache aws-cli curl gettext
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.22.5/bin/linux/amd64/kubectl
    - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name eks-cluster-diploma
  only:
    - tags
  when: manual
  script:
    - envsubst < k8s/db_drop.yaml | kubectl apply -f - && sleep 10
    - envsubst < k8s/db_create.yaml | kubectl apply -f - && sleep 10
    - envsubst < k8s/app_back.yaml | kubectl apply -f -
    - envsubst < k8s/app_front.yaml | kubectl apply -f -
    - kubectl rollout restart deployment app-front -n ${K8S_NAMESPACE}